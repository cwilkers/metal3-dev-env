<domain type='{{ libvirt_domain_type }}'>
  <name>{{ item.name }}</name>
  <memory unit='MiB'>{{ flavors[item.flavor].memory }}</memory>

  {{baremetal_vm_xml|default('')}}

  <os>
    <type arch='{{ libvirt_arch }}' machine='q35'>hvm</type>
{% if libvirt_firmware  == 'uefi' %}
     <loader readonly='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.secboot.fd</loader>
     <nvram>/var/lib/libvirt/qemu/nvram/{{ item.name }}.fd</nvram>
{% endif %}
    <boot dev='network'/>
    <bootmenu enable='no'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
{% if item.flavor == 'worker' %}
  <numatune>
    <memory mode='preferred' nodeset='0'/>
    <memnode cellid='0' mode='strict' nodeset='0'/>
    <memnode cellid='1' mode='strict' nodeset='1'/>
  </numatune>
  <vcpu>8</vcpu>
  <cpu mode='host-passthrough' check='none'>
    <topology sockets='2' cores='4' threads='1'/>
    <cache mode='passthrough'/>
    <numa>
      <cell id='0' cpus='0-3' memory='{{ (flavors[item.flavor].memory / 2) |int }}' unit='MiB'>
        <distances>
          <sibling id='0' value='10'/>
          <sibling id='1' value='21'/>
        </distances>
      </cell>
      <cell id='1' cpus='4-7' memory='{{ (flavors[item.flavor].memory / 2) |int }}' unit='MiB'>
        <distances>
          <sibling id='0' value='21'/>
          <sibling id='1' value='10'/>
        </distances>
      </cell>
    </numa>
  </cpu>

{% else %}
  <vcpu>{{ flavors[item.flavor].vcpu }}</vcpu>
  <cpu mode='host-passthrough'/>
{% endif %}
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <disk type='volume' device='disk'>
      <driver name='qemu' type='qcow2' cache='unsafe'/>
      <source pool='{{ libvirt_volume_pool }}' volume='{{ item.name }}.qcow2'/>
      <target dev='{{ libvirt_diskdev }}' bus='{{ libvirt_diskbus }}'/>
    </disk>
{% if libvirt_diskbus == 'scsi' %}
  <controller type='scsi' model='virtio-scsi' />
{% endif %}
{% for network in networks %}
    <interface type='bridge'>
      <mac address='{{ node_mac_map.get(item.name).get(network.name) }}'/>
      <source bridge='{{ network.bridge }}'/>
      <model type='{{ libvirt_nic_model }}'/>
{% if network.virtualport_type is defined %}
      <virtualport type='{{ network.virtualport_type }}'/>
{% endif %}
    </interface>
{% endfor %}
    <serial type='pty'/>
    <console type='pty'/>

{% if enable_vnc_console|bool %}
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes'/>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
    </video>
{% endif %}

    {{baremetal_vm_device_xml|default('')}}

  </devices>
</domain>
